@page "/"
@page "/home"
@layout NavLayout 
@using ShoppingCart.Components
@using ShoppingCart.Components.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager Navigation
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AuthenticationAppService _authenticationAppService
@inject ProductService _productService
@rendermode InteractiveServer
@inject CartService _cartService
@inject MessageService _messageService


<PageTitle>ShoppingCart</PageTitle> 

<ToastMessageComponent />
<!--middle Container-->
@if (isLoading)
{
    <div class="loader-container">
        <div class="spinner-border" role="status">
        </div>
    </div>
}
else
{
    <div class = "hero-section">
        <img src="images/clothes.jpg" alt="hero" class="hero-image">
        <div class="hero-overlay">
            <h2 class="text-danger">ShoppingCart Sale</h2>
            <h1 class="fw-bold">Minimal Fashion Style</h1>
            <p>Exclusive discounts on the latest fashion trends.</p>
            <a href="/home" class="btn btn-dark btn-lg">Shop Now</a>
        </div>
    </div> 

    <!--Product Section-->

    <div class="row" style="margin-top:10px">

        @foreach (ProductModel objproduct in lstproductModel)
        {
            <div class="col-md-4 mb-4">
                <div class="card shadow-sm">
                    <img class="card-img-top" src="@objproduct.ImageUrl" alt="@objproduct.ProductName" />
                    <div class="card-body text-center">
                        <h5 class="card-title">@objproduct.ProductName</h5>
                        <p class="card-text">₹@objproduct.Price</p>
                        <button class="btn btn-primary" id="btnAddtoCart" @onclick="() => AddToCart(objproduct)">Add to Cart</button>
                    </div>
                </div>
            </div>
        }

        <PaginationComponent TotalPages="objpaginationModel.TotalPages" CurrentPage="objpaginationModel.CurrentPage" OnPageChanged="GoToPage" />

        @*  <div class="col-md-4 mb-4" product>
        <div class="card shadow-sm">
            <img src="/images/product1.jpg" class="card-img-top" alt="Product1-Img">
            <div class="card-body text-center">
                <h5 class="card-title">Shirt</h5>
                <p class="card-text">Price:$4</p>
                <button class="btn btn-primary" @onclick="() => AddToCart()">Add to Cart</button>
            </div>
        </div>
    </div> *@


    </div>

    <!--Footer-->
    <FooterComponent /> 
}
@code {

    private string UserName = "";
    private List<ProductModel> lstproductModel = new List<ProductModel>();
    private CartModel objcartModel = new CartModel();
    private string SearchQuery { get; set; } = "";
    private int CartItemCount { get; set; } = 0;
    private bool isLoading = false;
    private bool showSuccessMessage = false;
    private string successMessage = string.Empty;
    // private bool _hasInitialized = false;
    private bool _hasLoadedProducts = false;
    private PaginationModel objpaginationModel = new PaginationModel();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    async Task LoadProducts()
    {
        isLoading = true;
        await Task.Delay(500);
        //lstproductModel = await _productService.GetAllProducts();
        lstproductModel = (await _productService.GetAllProducts(1, int.MaxValue)).Data.ToList();
        if (objpaginationModel.PageSize == 0)
        {
            objpaginationModel.PageSize = lstproductModel.Count <= 6 ? lstproductModel.Count : 6;
        }
        objpaginationModel.TotalPages = (int)Math.Ceiling((double)lstproductModel.Count / objpaginationModel.PageSize);
        if (objpaginationModel.CurrentPage <= 0 || objpaginationModel.CurrentPage > objpaginationModel.TotalPages)
            objpaginationModel.CurrentPage = 1;
        lstproductModel = lstproductModel.Skip((objpaginationModel.CurrentPage - 1) * objpaginationModel.PageSize).Take(objpaginationModel.PageSize).ToList();
        isLoading = false;
        StateHasChanged();
    }

    
    private int GetLoginMasterId(ClaimsPrincipal user)
    {
        var claim = user.FindFirst("LoginMasterID");
        return claim != null ? int.Parse(claim.Value) : 0;
    }
  

    private async Task AddToCart(ProductModel objproductModel)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)      
        {
            int userId = Convert.ToInt32(_authenticationAppService.GetClaimValue("LoginMasterId"));

            var cartItems = await _cartService.GetAllitems(userId);
            bool productExists = cartItems.Any(item => item.ProductId == objproductModel.ProductId);
            if (productExists)
            {
                _messageService.ShowMessage("Product is already in your cart!", "error");
            }
            else
            {
                CartModel objcartModel = new CartModel();
                objcartModel.UserId = Convert.ToInt32(_authenticationAppService.GetClaimValue("LoginMasterId"));
                objcartModel.ProductId = objproductModel.ProductId;
                objcartModel.ProductName = objproductModel.ProductName;
                objcartModel.Price = objproductModel.Price;
                objcartModel.ImageUrl = objproductModel.ImageUrl;
                objcartModel.Quantity = 1;
                await  _cartService.AddUpdateCart(objcartModel);
                _cartService.NotifyCartChanged();
              

                _messageService.ShowMessage("Product successfully added to your cart!", "success");
            }
            
        }
        else
        {
            _messageService.ShowMessage(" Please login to add products to your cart!", "error");
        }
    }
    private async void GoToPage(int pageNumber)
    {
        // if (pageNumber >= 1 && pageNumber <= objpaginationModel.TotalPages)
        // {
        //     objpaginationModel.CurrentPage = pageNumber;
            
        // }
        if (pageNumber >= 1 && pageNumber <= objpaginationModel.TotalPages)
        {
            objpaginationModel.CurrentPage = pageNumber;
            await LoadProducts();
        }
    }  
}
 