@page "/"
@page "/home"
@layout NavLayout 
@using ShoppingCart.Components
@using ShoppingCart.Components.Shared
@inject NavigationManager Navigation
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProductService _productService
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject CartService _cartService
    
<PageTitle>ShoppingCart</PageTitle> 

<!--middle Container-->
<div class = "hero-section">
    <img src="images/clothes.jpg" alt="hero" class="hero-image">
    <div class="hero-overlay">
        <h2 class="text-danger">ShoppingCart Sale</h2>
        <h1 class="fw-bold">Minimal Fashion Style</h1>
        <p>Exclusive discounts on the latest fashion trends.</p>
        <a href="/home" class="btn btn-dark btn-lg">Shop Now</a>
    </div>
</div> 
    
<!--Product Section-->
@if (lstproductModel == null)
{
    <p>Loading...</p>
}
else
{ 
    <div class="row" style="margin-top:10px">

        @foreach (ProductModel objproduct in lstproductModel)
        {
            <div class="col-md-4 mb-4">
                <div class="card shadow-sm">
                    <img class="card-img-top" src="@objproduct.ImageUrl" alt="@objproduct.ProductName" />
                    <div class="card-body text-center">
                        <h5 class="card-title">@objproduct.ProductName</h5>
                        <p class="card-text">₹@objproduct.Price</p>
                        <button class="btn btn-primary" id="btnAddtoCart" @onclick="() => AddToCart(objproduct)">Add to Cart</button>
                    </div>
                </div>
            </div>
        } 
        @*  <div class="col-md-4 mb-4" product>
        <div class="card shadow-sm">
            <img src="/images/product1.jpg" class="card-img-top" alt="Product1-Img">
            <div class="card-body text-center">
                <h5 class="card-title">Shirt</h5>
                <p class="card-text">Price:$4</p>
                <button class="btn btn-primary" @onclick="() => AddToCart()">Add to Cart</button>
            </div>
        </div>
    </div> *@


    </div>
}

<!--Footer-->
<FooterComponent /> 


@code {

    private string UserName = "";
    private string SearchQuery { get; set; } = "";
    private int CartItemCount { get; set; } = 0;
    private bool IsUserLoggedIn { get; set; } = false;
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }

    private List<ProductModel>? lstproductModel = new List<ProductModel>();
    private CartModel objcartModel = new CartModel();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            lstproductModel = await _productService.GetAllProducts();
            // IsUserLoggedIn = await CheckUserLoginStatus();
            
        }
        catch(Exception ex)
        {
            Console.WriteLine("Initialization error: " + ex.Message);
        }
    }
    
    private int GetLoginMasterId(ClaimsPrincipal user)
    {
        var claim = user.FindFirst("LoginMasterID");
        return claim != null ? int.Parse(claim.Value) : 0;
    }

    private async Task AddToCart(ProductModel objproductModel)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        int userId = GetLoginMasterId(user);

        if (user.Identity.IsAuthenticated)  
        {
            CartModel objcartModel = new CartModel();
            objcartModel.UserId = userId;
            objcartModel.ProductId = objproductModel.ProductId;
            objcartModel.ProductName = objproductModel.ProductName;
            objcartModel.Price = objproductModel.Price;
            objcartModel.ImageUrl = objproductModel.ImageUrl;
            objcartModel.Quantity = 1;
            Console.WriteLine(" added to cart!");
            _cartService.AddUpdateCart(objcartModel);
            CartItemCount++;
        }
        else
        {
            
            await JS.InvokeVoidAsync("alert", "To add products to your cart please login!");
        }
        // Example of getting UserId from claim
        //var userId = int.Parse(user.FindFirst(c => c.Type == "LoginMasterId")?.Value ?? "0");
       
    }

}
