@page "/auth/login"
@layout EmptyLayout
@using Entity
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient
@using System.ComponentModel.DataAnnotations
@using ShoppingCart.Service
@using static Repository.Services.Infrastructure.Enums
@inject NavigationManager NavigationManager
@inject AuthenticationAppService AuthenticationAppService
@inject UserService UserService 
@inject MessageService _messageService

<div data-permanent>
    <dialog id="blazor-global-loader">
        <div class="loadingio-spinner-rolling-nq4q5u6dq7r">
            <div class="ldio-x2uulkbinbj">
            </div>
        </div>
    </dialog>
</div>

<div class="container">
    <div class="main-container">
        <div class="login-container">
            <h3 class="login-title">Login</h3>

            <EditForm Model="Model" OnValidSubmit="@HandleLogin" FormName="@LoginForm">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <p class="text-danger">@ErrorMessage</p>
                }


                <div class="form-group">
                    <label>Email</label>
                    <InputText class="form-control" @bind-Value="Model.Email" />
                    <ValidationMessage For="@(() => Model.Email)" />
                </div>

                <div class="form-group">
                    <label>Password</label>
                    <InputText class="form-control" type="password" @bind-Value="Model.Password" />
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>

                <button type="submit" id="btnLogin" class="btn btn-primary login-button" title="Login">Login</button>
            </EditForm>
            <p class="mt-3 text-center">Don't have an account ? <a href="/register">Register</a></p>
        </div>
    </div>
</div>
@code {
    private readonly ILogger<Login> _logger;
    private LoginModel loginModel = new();
    private const string LoginForm = "login-form";

    [SupplyParameterFromForm(FormName = LoginForm)]
    private AuthModel Model { get; set; } = new();

    private bool rememberMe;

    public Login(AuthenticationAppService authenticationAppService)
    {
        this.AuthenticationAppService = authenticationAppService;
    }

    public string ErrorMessage { get; set; }

    private async Task HandleLogin()
    {
        ErrorMessage = string.Empty;
        var response = await AuthenticationAppService.Login(Model);
        _messageService.ShowMessage("Login successful!", "success");
        
        if (response == "1") // Admin
        {
            NavigationManager.NavigateTo("/admin/home");
        }
        else if (response == "3") // User
        {
            NavigationManager.NavigateTo("/home");
        }
        else
        {
            ErrorMessage = response;
        }
    }

    // if (string.IsNullOrEmpty(response))
    // {
    //     NavigationManager.NavigateTo("/Home");
    //     NavigationManager.NavigateTo(ReturnUrl);
    // }
    // else
    // {
    //     ErrorMessage = response;
    // }
}



