@page "/register"
@layout EmptyLayout
@using ShoppingCart.Components.Layout
@using Entity
@using Repository.Services.Context
@using Microsoft.AspNetCore.Identity
@using ShoppingCart.Service
@inject AppDbContext _context
@inject NavigationManager Navigation
@inject UserService UserService
@rendermode InteractiveServer

@inject IJSRuntime JS



<div class="container">
    <div class="main-container">
        <div class="register-container">
            <h3 class="register-title">Register</h3>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <p class="text-danger">@ErrorMessage</p>
            }
            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <p class="alert alert-success">@SuccessMessage</p>
            }

            <EditForm Model="registerModel" OnValidSubmit="@HandleRegister" FormName="@RegisterForm">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Name</label>
                    <InputText class="form-control" @bind-Value="registerModel.FirstName" />
                    <ValidationMessage For="@(() => registerModel.FirstName)" />
                </div>

                <div class="form-group">    
                    <label>Email</label>
                    <InputText class="form-control" @bind-Value="registerModel.Email" />
                    <ValidationMessage For="@(() => registerModel.Email)" />
                </div>

                <div class="form-group">
                    <label>Mobile Number</label>
                    <InputText class="form-control" @bind-Value="registerModel.Mobile" />
                    <ValidationMessage For="@(() => registerModel.Mobile)" />
                </div>

                <div class="form-group">
                    <label>Password</label>
                    <InputText class="form-control" type="password" @bind-Value="registerModel.Password" />
                    <ValidationMessage For="@(() => registerModel.Password)" />
                </div>

                <div class="form-group">
                    <label>Confirm Password</label>
                    <InputText class="form-control" type="password" @bind-Value="registerModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                </div>

                <button type="submit" class="btn btn-success register-button">Register</button>

            </EditForm>

            <p class="mt-3 text-center"> Already have an account ? <a href="/auth/login">Login</a></p>

        </div>
    </div>
</div>

@code {

    [SupplyParameterFromForm]
    private RegisterModel registerModel { get; set; } = new();
    private string ErrorMessage = "";
    private string SuccessMessage = "";

    private const string RegisterForm = "Register-form";
    [Inject] public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
    }

    private async Task LoadUser()
    {
        //Model = await StudentService.GetStudents();
        StateHasChanged();
    }

    private async Task HandleRegister()
     {
       

        ErrorMessage = "";
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            ErrorMessage = "Passwords do not match.";
            return;
        } 
       




        var user = new IdentityUser { UserName = registerModel.Email, Email = registerModel.Email };
        // var result = await UserService.AddUser(registerModel);
        


        // if (result)
        // {
        //     await JS.InvokeVoidAsync("alert", "Registered successfully. Please login.");
        //     Navigation.NavigateTo("/login");
        // }
        // else
        // {
        //     ErrorMessage = "Registration failed. Try again.";
        // }
      
        await UserService.AddUpdateUser(registerModel);
        await JS.InvokeVoidAsync("alert", "Registered successfully. Please login.");
        StateHasChanged();
        await Task.Delay(1000); // Wait for 1 seconds before redirecting
        Navigation.NavigateTo("/auth/login");
        
        await LoadUser();
    }

   

    
}
