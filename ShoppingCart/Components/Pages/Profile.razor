@page "/profile"
@using Microsoft.AspNetCore.Components.Authorization
@layout NavLayout
@inject ProfileService _profileService
@inject NavigationManager Navigation
@inject AuthenticationAppService _authenticationAppService
@rendermode InteractiveServer
@inject AuthenticationStateProvider _authenticationStateProvider


    <div class="profile-card">
<h3><i class="bi bi-person-circle"></i>@UserName's Profile</h3>

@if (objprofileModel == null)
{
    <p class="text-center">Loading...</p>
}
else
{
        @if (!isEditing)
        {
            <div class="profile-item">
                <span class="profile-icon"><i class="bi bi-person-fill"></i></span>
                <span class="profile-label">Name:</span>
                <span>@objprofileModel.FirstName</span>
            </div>
            <div class="profile-item">
                <span class="profile-icon"><i class="bi bi-envelope-fill"></i></span>
                <span class="profile-label">Email:</span>
                <a href="https://mail.google.com/mail/?view=cm&fs=1&to=@objprofileModel.Email" target="_blank" class="text-decoration-none text-primary">
                    @objprofileModel.Email
                </a>
            </div>
            <div class="profile-item">
                <span class="profile-icon"><i class="bi bi-telephone-fill"></i></span>
                <span class="profile-label">Mobile:</span>
                <span>@objprofileModel.MobileNumber</span>
            </div>
            <div class="profile-item">
                <span class="profile-icon"><i class="bi bi-geo-alt-fill"></i></span>
                <span class="profile-label">Address:</span>
                <a href="https://www.google.com/maps?q=@Uri.EscapeDataString(objprofileModel.Address ?? "")"
                target="_blank" class="text-decoration-none text-primary">
                    @objprofileModel.Address
                </a>

            </div>
            <button class="btn btn-primary mt-3" @onclick="EnableEditing">Edit</button>

        }
        else
        {
            <!-- Edit Mode -->
            <div class="mb-3">
                <label class="form-label">Name</label>
                <input class="form-control" @bind="objprofileModel.FirstName" />
            </div>
            <div class="mb-3">
                <label class="form-label">Email</label>
                <input class="form-control" @bind="objprofileModel.Email" />
            </div>
            <div class="mb-3">
                <label class="form-label">Mobile</label>
                <input class="form-control" @bind="objprofileModel.MobileNumber" />
            </div>
            <div class="mb-3">
                <label class="form-label">Address</label>
                <input class="form-control" @bind="objprofileModel.Address" />
            </div>
            <button class="btn btn-success me-2" @onclick="SaveProfile">Save</button>
            <button class="btn btn-secondary" @onclick="CancelEditing">Cancel</button>

        }
    
    }
    </div>
 
@code {
    private string UserName  = "";
    private ProfileModel objprofileModel;
    private bool isEditing = false;
    private bool _hasInitialized = false;


    // protected override async Task OnInitializedAsync()
    // {
    //     UserName = _authenticationAppService.GetClaimValue("FirstName");
    //     var loginMasterId = Convert.ToInt32(_authenticationAppService.GetClaimValue("LoginMasterId"));
    //     objprofileModel = await _profileService.GetUserProfile(loginMasterId);
    // }
    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        if (firstRender && !_hasInitialized)
        {
            UserName = _authenticationAppService.GetClaimValue("FirstName");
            _hasInitialized = true;

            var loginMasterId = Convert.ToInt32(_authenticationAppService.GetClaimValue("LoginMasterId"));
            objprofileModel = await _profileService.GetUserProfile(loginMasterId);

            StateHasChanged();
        }
    } 
                     
    private void EnableEditing()
    {
        isEditing = true; 
    }

    private async Task SaveProfile()
    {
        objprofileModel.LoginMasterId = Convert.ToInt32(_authenticationAppService.GetClaimValue("LoginMasterId"));
        await _profileService.UpdateUserProfile(objprofileModel); 
        isEditing = false;
    }

    private async Task CancelEditing()
    {
        var loginMasterId = Convert.ToInt32(_authenticationAppService.GetClaimValue("LoginMasterId"));
        objprofileModel = await _profileService.GetUserProfile(loginMasterId);
        isEditing = false;
    }
}
