@page "/admin/product"
@using Entity
@using Repository.Services.Contract
@inject ProductService _productService
@rendermode InteractiveServer


<div class="container d-flex justify-content-center align-items-center" style="min-height: 80vh;">
    <div class="w-100" style="max-width: 400px;">
        <h3 class="mb-4">🛍️ Add New Product</h3>

        <EditForm Model="productModel" OnValidSubmit="@AddProduct" FormName="@ProductForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Product Name</label>
                <InputText class="form-control" @bind-Value="productModel.ProductName" placeholder="Enter product name" />
                <ValidationMessage For="@(() => productModel.ProductName)" />           
            </div>

            <div class="mb-3">
                <label class="form-label">Price</label>
                <InputNumber class="form-control" @bind-Value="productModel.Price" placeholder="Enter product price" />
                <ValidationMessage For="@(() => productModel.Price)" /> 
            </div>

            @* <div class="mb-3"> *@
            @*     <label class="form-label">Image URL</label> *@
            @*     <InputText class="form-control" @bind-Value="productModel.ImageUrl" placeholder="https://..." /> *@
            @*     <ValidationMessage For="@(() => productModel.ImageUrl)" /> *@
            @* </div> *@ 

            <div class="mb-3"> 
                <label class="form-label">Product Image</label> 
                <InputFile OnChange="@OnInputFileChange" /> 
                @if (!string.IsNullOrEmpty(fileError)) 
                { 
                    <div class="text-danger">@fileError</div> 
                } 
            </div> 

            <button class="btn btn-primary w-100" type="submit">Add Product</button>
        </EditForm>
    </div>
</div>

@if (successMessage != null)
{
    <div class="alert alert-success mt-3 text-center">@successMessage</div>
}


@code {
    [SupplyParameterFromForm]
    private ProductModel productModel { get; set; } = new ProductModel();
    private string? successMessage;
    private const string ProductForm = "Product-form";
    private string? fileError;
    private IBrowserFile? uploadedFile;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxFileSize = 1024 * 1024 * 15; // 15 MB
        var upload = e.File;
        // var uploadPath = Path.Combine(Environment.CurrentDirectory, "wwwroot", "images");


        if (upload.Size > maxFileSize)
        {
            fileError = $"The file {upload.Name} exceeds the 15 MB size limit.";
            productModel.ImageFile = null;
            return;
        }
        uploadedFile = upload;
        productModel.ImageFile = uploadedFile; 
        fileError = null;

    }

    private async Task AddProduct()
    {

        if (uploadedFile == null)
        {
            fileError = "Please select a product image.";
            StateHasChanged();
            return;
        }
        // Save image locally
        var uniqueFileName = $"{Guid.NewGuid()}_{uploadedFile.Name}";
        var uploadPath = Path.Combine(Environment.CurrentDirectory, "wwwroot", "images");
        Directory.CreateDirectory(uploadPath);
        var filePath = Path.Combine(uploadPath, uniqueFileName);

        await using var fs = new FileStream(filePath, FileMode.Create);
        await uploadedFile.OpenReadStream(15 * 1024 * 1024).CopyToAsync(fs);

        productModel.ImageUrl = uniqueFileName ;

        bool result = await _productService.AddUpdateProduct(productModel, null); // imageFile is not needed now

        if (result)
        {
            successMessage = "✅ Product added successfully!";
            productModel = new();
            uploadedFile = null;
            fileError = null;
        }
        else
        {
            successMessage = "❌ Failed to add product. Try again!";
        }
    }
}


  
    

