@page "/cart"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@layout NavLayout
@inject CartService _cartService
@inject NavigationManager Navigation 
@inject AuthenticationAppService _authenticationAppService
@rendermode InteractiveServer 
@inject MessageService _messageService




<h3>Your Cart</h3>

@if (lstcartModel == null)
{
    <p>Loading...</p>
}
else
{ 
    <div class="cart-container p-4 mt-5" style="border: 2px solid #ccc; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); background-color: #fff;">
      
        <table class="table mt-4" >
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Qty</th>
                <th>Price</th>
                <th>Total</th> 
                <th style="text-align:center;">Actions</th>
            </tr>
        </thead> 
        <tbody>
            @foreach (CartModel objcart in lstcartModel)
            {
                <tr @key="objcart.CartId">
                    <td><img src="@objcart.ImageUrl" width="60" height="60" /></td>
                    <td>@objcart.ProductName</td>
                    <td>
                        <div class="d-flex align-items-center gap-2">
                            <button class="btn btn-secondary btn-sm" @onclick="() => DecreaseQuantity(objcart)">-</button>
                            <span>@objcart.Quantity</span>
                            <button class="btn btn-secondary btn-sm" @onclick="() => IncreaseQuantity(objcart)">+</button>
                        </div>
                    </td>
                    <td>₹@objcart.Price</td>
                    <td>₹@(objcart.Price * objcart.Quantity)</td>
                    <td style="text-align:center;">
                       
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveFromCart(objcart.CartId)">Remove</button>
                    </td>
                </tr>
             }
        </tbody>
    </table>

    
    <div class="d-flex justify-content-between align-items-center mt-4">
        <h4>Total Amount: ₹@lstcartModel.Sum(x => x.Price * x.Quantity)</h4>
        <button class="btn btn-success btn-sm" @onclick="() => PlaceOrder()" style="margin-right:101px">Place Order </button>
    </div>
</div>
}


@code {
        
    private List<CartModel>? lstcartModel = new List<CartModel>();
    private CartModel objcartModel = new CartModel();

    // private int GetLoginMasterId(ClaimsPrincipal user)
    // {
    //     var claim = user.FindFirst("LoginMasterID");
    //     return claim != null ? int.Parse(claim.Value) : 0;
    // }

    protected override async Task OnInitializedAsync()
    {
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;
        int userId = Convert.ToInt32(_authenticationAppService.GetClaimValue("LoginMasterId")); 
        lstcartModel = await _cartService.GetAllitems(userId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        //var userId = /* fetch LoginMasterId from auth/session */
        //lstcartModel = await _cartService.GetAllitems(userId); // You’ll create this
    }
    private async Task IncreaseQuantity(CartModel item)
    {
        item.Quantity++;
        await _cartService.AddUpdateCart(item);
        StateHasChanged();
    }

    private async Task DecreaseQuantity(CartModel item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            await _cartService.AddUpdateCart(item);
            StateHasChanged();
        }
    }

   
    private async Task RemoveFromCart(int cartId)
    {
        await _cartService.RemoveCart(cartId,null);

        var itemToRemove = lstcartModel.FirstOrDefault(x => x.CartId == cartId);
        if (itemToRemove != null)
        {
            lstcartModel.Remove(itemToRemove);
        }
        _cartService.NotifyCartChanged();
        _messageService.ShowMessage("Product Removed From Cart", "success");
    }
     
    private void PlaceOrder()
    {
        if (lstcartModel == null || !lstcartModel.Any())
        {
            _messageService.ShowMessage("Your cart is empty. Please add products before placing an order.", "error");
           // JS.InvokeVoidAsync("alert", "Your cart is empty. Please add products before placing an order.");
            return;
        }
        Console.WriteLine("BuyNow button clicked!");
        decimal totalPrice = lstcartModel.Sum(x => (decimal)(x.Price * x.Quantity));
        //int totalProducts = lstcartModel.Sum(x => x.Quantity);
        string totalProductInfo = string.Join(", ", lstcartModel.Select(item => $"{item.Quantity}*{item.ProductName}"));
        
        Navigation.NavigateTo($"/orders?totalAmount={totalPrice}&totalProducts={totalProductInfo}", forceLoad: false);
        
    }
}


<ToastMessageComponent />   