@page "/cart"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@layout NavLayout
@inject CartService _cartService
@inject NavigationManager Navigation 
@rendermode InteractiveServer 


<h3>Your Cart</h3>

@if (lstcartModel == null)
{
    <p>Loading...</p>
}
else
{ 
    <table class="table mt-4" >
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Qty</th>
                <th>Price</th>
                <th>Total</th> 
                <th style="text-align:center;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (CartModel objcart in lstcartModel)
            {
                <tr @key="objcart.CartId">
                    <td><img src="@objcart.ImageUrl" width="60" height="60" /></td>
                    <td>@objcart.ProductName</td>
                    <td>
                        <div class="d-flex align-items-center gap-2">
                            <button class="btn btn-secondary btn-sm" @onclick="() => DecreaseQuantity(objcart)">-</button>
                            <span>@objcart.Quantity</span>
                            <button class="btn btn-secondary btn-sm" @onclick="() => IncreaseQuantity(objcart)">+</button>
                        </div>
                    </td>
                    <td>₹@objcart.Price</td>
                    <td>₹@(objcart.Price * objcart.Quantity)</td>
                    <td style="text-align:center;">
                       
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveFromCart(objcart.CartId)">Remove</button>
                    </td>
                </tr>
             }
        </tbody>
    </table>
   
    <div class="d-flex justify-content-between align-items-center mt-4">
        <h4>Total Amount: ₹@lstcartModel.Sum(x => x.Price * x.Quantity)</h4>
        <button class="btn btn-success btn-sm" @onclick="() => BuyNow()" style="margin-right:101px">Place Order </button>
    </div>
}

@code {
        
    private List<CartModel>? lstcartModel = new List<CartModel>();
    private CartModel objcartModel = new CartModel();

    private int GetLoginMasterId(ClaimsPrincipal user)
    {
        var claim = user.FindFirst("LoginMasterID");
        return claim != null ? int.Parse(claim.Value) : 0;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        int userId = GetLoginMasterId(user);
        lstcartModel = await _cartService.GetAllitems(userId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        //var userId = /* fetch LoginMasterId from auth/session */
        //lstcartModel = await _cartService.GetAllitems(userId); // You’ll create this
    }
    private async Task IncreaseQuantity(CartModel item)
    {
        item.Quantity++;
        await _cartService.AddUpdateCart(item);
        StateHasChanged();
    }

    private async Task DecreaseQuantity(CartModel item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            await _cartService.AddUpdateCart(item);
            StateHasChanged();
        }
    }

   
    private async Task RemoveFromCart(int cartId)
    {
        await _cartService.RemoveCart(cartId);

        var itemToRemove = lstcartModel.FirstOrDefault(x => x.CartId == cartId);
        if (itemToRemove != null)
        {
            lstcartModel.Remove(itemToRemove);
        }

        StateHasChanged(); 
    }

    private void BuyNow()
    {
        Console.WriteLine("BuyNow button clicked!");
        Navigation.NavigateTo("/orders", forceLoad: true);
    }
}
