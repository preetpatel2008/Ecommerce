@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

    
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ShoppingCart</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        @* <div class="nav-item px-3">
            <NavLink class="nav-link" href="/home" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>  *@
    

        <!--Admin Pages -->

        <AuthorizeView Roles="Admin">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/admin/home">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
             </NavLink> 
        </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/admin/product">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Product
                </NavLink>
            </div>

        </AuthorizeView>

      
    </nav>
</div>

@code{
    private ClaimsPrincipal user;
    private string userRole = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var roleClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
            userRole = roleClaim?.Value ?? string.Empty;
        }
    }
}
